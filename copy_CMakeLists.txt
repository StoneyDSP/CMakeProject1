# CMakeList.txt : Top-level CMake project file, do global configuration
# and include sub-projects here.

# ------------------------- Configure CMake ---------------------------------- #

# CMake requirements.
cmake_minimum_required(VERSION 3.7...3.24)

# CMake policy.
if(${CMAKE_VERSION} VERSION_LESS 3.12)
    cmake_policy(VERSION ${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION})
endif()

set_property(GLOBAL PROPERTY USE_FOLDERS YES)
set(ENABLE_LOGGING = 1)

message("Initiating CMake v${CMAKE_VERSION}")

# ------------------------- Configure External Modules ----------------------- #

option(USE_EXTERN "Use extern folder to resolve dependencies" ON)

if(USE_EXTERN)
  # add required packages
  message("Checking project dependencies...")
  if(GIT_FOUND)
    message(STATUS "git: already found. Using: ${CMAKE_PROJECT_NAME} submodules")
  else()
    if(EXISTS ${CMAKE_SOURCE_DIR}/.gitmodules)
      message(STATUS "git: adding local submodules...")
      include(extern/CMakeLists.txt)
    else()
      message(STATUS "git: no submodule file found")
    endif()
  endif()
endif()

# ---------------------------------------------------------------------------- #
#
#                             Configure Project
#
# ---------------------------------------------------------------------------- #
message("${CMAKE_CURRENT_SOURCE_DIR}/>")

message("Detecting CMake project...")

# Create a CMake project here.
project (CMakeProject1
  VERSION
    1.0.0.0
  DESCRIPTION
    "VS Console Application with CMake, vcpkg, Doxygen, and JUCE support"
  HOMEPAGE_URL
    https://github.com/StoneyDSP/CMakeProject1
  LANGUAGES
    C CXX
)

message(STATUS "...Detected project:\n")
message("${PROJECT_NAME} v${PROJECT_VERSION}")
message("${PROJECT_DESCRIPTION}")
message("${PROJECT_HOMEPAGE_URL}\n")

# Check if we are in the top-level project or not:
if (NOT CMAKE_PROJECT_NAME STREQUAL PROJECT_NAME)
    message(STATUS "${PROJECT_NAME} is a sub-project of ${CMAKE_PROJECT_NAME}")
else()
    message(STATUS "${CMAKE_PROJECT_NAME} is a top-level project")
endif()

# Configure folder structure.
set(PROJECT_BINARY_DIR ${CMAKE_CURRENT_SOURCE_DIR}/bin)
set(PROJECT_SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/src)
set(RUNTIME_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR})
set(ARCHIVE_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR})
set(LIBRARY_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR})
set(PDB_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/bin)
set(CMAKE_INTDIR ${PROJECT_BINARY_DIR}/artefacts)

message("set (PROJECT_BINARY_DIR) <${PROJECT_BINARY_DIR}>")
message("set (PROJECT_SOURCE_DIR) <${PROJECT_SOURCE_DIR}>")
message("set (RUNTIME_OUTPUT_DIRECTORY) <${RUNTIME_OUTPUT_DIRECTORY}>")
message("set (ARCHIVE_OUTPUT_DIRECTORY) <${ARCHIVE_OUTPUT_DIRECTORY}>")
message("set (LIBRARY_OUTPUT_DIRECTORY) <${LIBRARY_OUTPUT_DIRECTORY}>")
message("set (PDB_OUTPUT_DIRECTORY) <${PDB_OUTPUT_DIRECTORY}>")
message("set (CMAKE_INTDIR) <${CMAKE_INTDIR}>\n")

option(BUILD_SHARED_LIBS "Build using shared libraries" ON)

# Add output target.
message("Adding target...")
add_executable (${PROJECT_NAME}
${PROJECT_SOURCE_DIR}/main.cpp
${CMAKE_CURRENT_SOURCE_DIR}/include/CMakeProject1.h)
message("Added target: ${PROJECT_NAME}.exe")

# Set target version
set_property(TARGET ${PROJECT_NAME} PROPERTY VERSION ${PROJECT_VERSION})
set_property(TARGET ${PROJECT_NAME} PROPERTY SOVERSION ${PROJECT_VERSION_MAJOR})
set_property(TARGET ${PROJECT_NAME} PROPERTY INTERFACE_${PROJECT_NAME}_MAJOR_VERSION ${PROJECT_VERSION_MAJOR})
set_property(TARGET ${PROJECT_NAME} APPEND PROPERTY COMPATIBLE_INTERFACE_STRING ${PROJECT_NAME}_MAJOR_VERSION)
#message("Added target: ${PROJECT_NAME}.exe")

# make cache variables for install destinations
include(GNUInstallDirs)
message(STATUS "Include (GNUInstallDirs)")

# Packaging support
include(InstallRequiredSystemLibraries)
set(CPACK_PACKAGE_VENDOR "StoneyDSP")
set(CPACK_PACKAGE_DESCRIPTION_SUMMARY "CMake Project with package management")
set(CPACK_PACKAGE_VERSION_MAJOR ${PROJECT_VERSION_MAJOR})
set(CPACK_PACKAGE_VERSION_MINOR ${PROJECT_VERSION_MINOR})
set(CPACK_PACKAGE_VERSION_PATCH ${PROJECT_VERSION_PATCH})
set(CPACK_RESOURCE_FILE_LICENSE ${CMAKE_CURRENT_SOURCE_DIR}/LICENCE)
set(CPACK_RESOURCE_FILE_README ${CMAKE_CURRENT_SOURCE_DIR}/README.md)
set(CPACK_SOURCE_GENERATOR TGZ;ZIP)
set(CPACK_SOURCE_IGNORE_FILES
    /.git
    /.github
    /.vs
    /.vscode
    # /bin
    /installed
    /.*build.*
    /\\\\.DS_Store
)

# include installer generator
include(CPack)
message(STATUS "Include (CPack)")

message(STATUS "CPack generators: ${CPACK_SOURCE_GENERATOR}")
message(STATUS "CPack ignores: ${CPACK_SOURCE_IGNORE_FILES}")

# specify the C++ standard.
if (CMAKE_VERSION VERSION_GREATER 3.12)
  set_property(TARGET ${PROJECT_NAME} PROPERTY CXX_STANDARD 20)
endif()

target_include_directories(${PROJECT_NAME}
  INTERFACE
    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>
    $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>
)

# install the target and create export-set
install(TARGETS ${PROJECT_NAME}
        EXPORT ${PROJECT_NAME}Targets
        LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
        ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
        RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
        INCLUDES DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/${PROJECT_NAME}
)

# generate and install export file
install(EXPORT ${PROJECT_NAME}Targets
        FILE ${PROJECT_NAME}Targets.cmake
        DESTINATION ${PROJECT_BINARY_DIR}/share/${PROJECT_NAME}

# include CMakePackageConfigHelpers macro.
include(CMakePackageConfigHelpers)
message(STATUS "Include (CMakePackageConfigHelpers)\n")

# ------------------------- Configure config files --------------------------- #

message(STATUS "Begin configure files...\n")

# generate the version file for the config file
message("Creating package version file...")
write_basic_package_version_file(
  ${CMAKE_CURRENT_BINARY_DIR}/share/${PROJECT_NAME}/${PROJECT_NAME}ConfigVersion.cmake
  VERSION ${PROJECT_VERSION}
  COMPATIBILITY AnyNewerVersion)
if(EXISTS ${CMAKE_CURRENT_BINARY_DIR}/share/${PROJECT_NAME}/${PROJECT_NAME}ConfigVersion.cmake)
  message("Created package version file.\n")
else()
  message(FATAL_ERROR "Creating package version file failed!\n")
endif()

# create config file
message("Creating package config file...")
configure_package_config_file(
    ${CMAKE_CURRENT_SOURCE_DIR}/cmake/${PROJECT_NAME}Config.cmake.in
    ${CMAKE_CURRENT_BINARY_DIR}/share/${PROJECT_NAME}/${PROJECT_NAME}Config.cmake
  INSTALL_DESTINATION
    ${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}
    NO_SET_AND_CHECK_MACRO
    NO_CHECK_REQUIRED_COMPONENTS_MACRO)
if(EXISTS ${CMAKE_CURRENT_BINARY_DIR}/share/${PROJECT_NAME}/${PROJECT_NAME}Config.cmake)
  message("Created package config file.\n")
else()
  message(FATAL_ERROR "Creating package config file failed!\n")
endif()

# install config files
message("Installing package config file...")
install(
  FILES
    ${CMAKE_CURRENT_BINARY_DIR}/share/${PROJECT_NAME}/${PROJECT_NAME}Config.cmake
    ${CMAKE_CURRENT_BINARY_DIR}/share/${PROJECT_NAME}/${PROJECT_NAME}ConfigVersion.cmake
  DESTINATION
    ${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME})
message("Installed package config file.\n")

# create config header for C++
message("Creating config header file...")
configure_file(
  ${CMAKE_CURRENT_SOURCE_DIR}/cmake/${PROJECT_NAME}Config.h.in
  ${CMAKE_INSTALL_INCLUDEDIR}/${PROJECT_NAME}/${PROJECT_NAME}Config.h)
message("Created config header file.\n")

export(EXPORT ${PROJECT_NAME}Targets
  FILE ${CMAKE_CURRENT_BINARY_DIR}/lib/cmake/${PROJECT_NAME}/${PROJECT_NAME}Targets.cmake
)

message(STATUS "End configure files.\n")
)

# ------------------------- Packages and Sub-Projects ------------------------ #

# To find and use catch2
#find_path(CATCH_INCLUDE_DIR NAMES catch.hpp PATH_SUFFIXES catch2)
#include_directories(${CATCH_INCLUDE_DIR})

#find_package(Catch2 CONFIG REQUIRED)
find_package(Catch2 CONFIG REQUIRED)
message("found CMake package: Catch2 CONFIG REQUIRED")

#find_package(JUCE CONFIG REQUIRED)
find_package(fmt CONFIG REQUIRED)
message("found CMake package: fmt CONFIG REQUIRED")

# Include sub-folder/projects to the build tree.
#message("Adding subdirectories...")
#add_subdirectory (docs)
#add_subdirectory (src)
#add_subdirectory (cmake)
#message("... Subdirectories added.")

#message("${CMAKE_CURRENT_SOURCE_DIR}/>")

# link libraries and modules to other libraries or executables.
message(STATUS "Adding link libraries to target...")
target_link_libraries(${PROJECT_NAME}
  PRIVATE
    fmt::fmt
    Catch2::Catch2
    Catch2::Catch2WithMain
)
message(STATUS "...Link libraries added.")

# Host handling:
if(WIN32)
    add_compile_definitions(WINDOWS=1)
    message(STATUS "Setting Compile Definition WINDOWS=1")
endif ()

if (UNIX AND NOT APPLE)
    add_compile_definitions(LINUX=1)
    message(STATUS "Setting Compile Definition LINUX=1")
endif ()

if (APPLE)
    add_compile_definitions(APPLE=1)
    message(STATUS "Setting Compile Definition APPLE=1")
endif ()

# Debug definitions:
if(${CMAKE_BUILD_TYPE} MATCHES Debug)
    add_compile_definitions(_DEBUG=1)
    message(STATUS "Setting Compile Definition _DEBUG=1")
else()
    add_compile_definitions(NDEBUG=1)
    message(STATUS "Setting Compile Definition NDEBUG=1")
endif(${CMAKE_BUILD_TYPE} MATCHES Debug)

# Testing...
enable_testing()
if(CMAKE_PROJECT_NAME STREQUAL PROJECT_NAME AND BUILD_TESTING)
    message(STATUS "Testing enabled. Adding to file tree.")
    add_subdirectory(tests)
else()
    message(STATUS "Testing disabled. Skipping tests directory.")
endif()
