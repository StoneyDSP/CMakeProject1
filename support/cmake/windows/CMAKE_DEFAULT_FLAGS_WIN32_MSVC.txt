# CMake requirements.
cmake_minimum_required(VERSION 3.7...3.24.2)

#if(${CMAKE_BUILD_TYPE} MATCHES Debug)
#    add_compile_definitions(_DEBUG=1)
#    message(STATUS "Setting Compile Definition _DEBUG=1")
#else()
#    add_compile_definitions(NDEBUG=1)
#    message(STATUS "Setting Compile Definition NDEBUG=1")
#endif(${CMAKE_BUILD_TYPE} MATCHES Debug)

## Host handling:
#if(WIN32)
#    add_compile_definitions(WINDOWS=1)
#    message(STATUS "Setting Compile Definition WINDOWS=1")
#endif ()

#if (UNIX AND NOT APPLE)
#    add_compile_definitions(LINUX=1)
#    message(STATUS "Setting Compile Definition LINUX=1")
#endif ()

#if (APPLE)
#    add_compile_definitions(APPLE=1)
#    message(STATUS "Setting Compile Definition APPLE=1")
#endif ()

if(MSVC)
	string(APPEND CMAKE_CXX_FLAGS "/nologo /DWIN32 /D_WINDOWS /W3 /utf-8 /EHsc ")
	string(APPEND CMAKE_CXX_FLAGS_DEBUG "/Zi /Ob0 /Od /RTC1 ")
	string(APPEND CMAKE_CXX_FLAGS_RELEASE "/O2 /Ob2 /DNDEBUG ")
	string(APPEND CMAKE_CXX_FLAGS_MINSIZEREL "/O1 /Ob1 /DNDEBUG ")
	string(APPEND CMAKE_CXX_FLAGS_RELWITHDEBINFO "/Zi /O2 /Ob1 /DNDEBUG ")

	string(APPEND CMAKE_C_FLAGS "/nologo /DWIN32 /D_WINDOWS /W3 /utf-8 ")
	string(APPEND CMAKE_C_FLAGS_DEBUG "/Zi /Ob0 /Od /RTC1 ")
	string(APPEND CMAKE_C_FLAGS_RELEASE "/O2 /Ob2 /DNDEBUG ")
	string(APPEND CMAKE_C_FLAGS_MINSIZEREL "/O1 /Ob1 /DNDEBUG ")
	string(APPEND CMAKE_C_FLAGS_RELWITHDEBINFO "/Zi /O2 /Ob1 /DNDEBUG ")

	string(APPEND VCPKG_CXX_FLAGS ${CMAKE_CXX_FLAGS})
	string(APPEND VCPKG_CXX_FLAGS_DEBUG ${CMAKE_CXX_FLAGS_DEBUG})
	string(APPEND VCPKG_CXX_FLAGS_RELEASE ${CMAKE_CXX_FLAGS_RELEASE})
	string(APPEND VCPKG_CXX_FLAGS_MINSIZEREL ${CMAKE_CXX_FLAGS_MINSIZEREL})
	string(APPEND VCPKG_CXX_FLAGS_RELWITHDEBINFO ${CMAKE_CXX_FLAGS_RELWITHDEBINFO})

	string(APPEND VCPKG_C_FLAGS ${CMAKE_C_FLAGS})
	string(APPEND VCPKG_C_FLAGS_DEBUG ${CMAKE_C_FLAGS_DEBUG})
	string(APPEND VCPKG_C_FLAGS_RELEASE ${CMAKE_C_FLAGS_RELEASE})
	string(APPEND VCPKG_C_FLAGS_MINSIZEREL ${CMAKE_C_FLAGS_MINSIZEREL})
	string(APPEND VCPKG_C_FLAGS_RELWITHDEBINFO ${CMAKE_C_FLAGS_RELWITHDEBINFO})

	# Use max Warning Level
    string(REPLACE "/W3 " "/Wall " CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS})
    string(REPLACE "/W3 " "/Wall " CMAKE_CXX_FLAGS_DEBUG ${CMAKE_CXX_FLAGS_DEBUG})
    string(REPLACE "/W3 " "/Wall " CMAKE_CXX_FLAGS_RELEASE ${CMAKE_CXX_FLAGS_RELEASE})
    string(REPLACE "/W3 " "/Wall " CMAKE_CXX_FLAGS_MINSIZEREL ${CMAKE_CXX_FLAGS_MINSIZEREL})
    string(REPLACE "/W3 " "/Wall " CMAKE_CXX_FLAGS_RELWITHDEBINFO ${CMAKE_CXX_FLAGS_RELWITHDEBINFO})
    # Library needs /EHsc (Enable C++ exceptions)
endif(MSVC)

# if the compiler is a variant of gcc, this should be set to 1
if(CMAKE_COMPILER_IS_GNUCC)
	message( STATUS "CMAKE_COMPILER_IS_GNUCC: " ${CMAKE_COMPILER_IS_GNUCC} )
	string(APPEND CMAKE_C_FLAGS " ")
	string(APPEND CMAKE_C_FLAGS_DEBUG " -g ")
	string(APPEND CMAKE_C_FLAGS_RELEASE " -O3 -DNDEBUG ")
	string(APPEND CMAKE_C_FLAGS_MINSIZEREL " -Os -DNDEBUG ")
	string(APPEND CMAKE_C_FLAGS_RELWITHDEBINFO " -O2 -g -DNDEBUG ")
endif(CMAKE_COMPILER_IS_GNUCC)

# if the compiler is a variant of g++, this should be set to 1
if(CMAKE_COMPILER_IS_GNUCXX)
	message( STATUS "CMAKE_COMPILER_IS_GNUCXX : " ${CMAKE_COMPILER_IS_GNUCXX} )
	string(APPEND CMAKE_CXX_FLAGS "")
	string(APPEND CMAKE_CXX_FLAGS_DEBUG " -g ")
	string(APPEND CMAKE_CXX_FLAGS_RELEASE " -O3 -DNDEBUG ")
	string(APPEND CMAKE_CXX_FLAGS_MINSIZEREL " -Os -DNDEBUG ")
	string(APPEND CMAKE_CXX_FLAGS_RELWITHDEBINFO " -O2 -g -DNDEBUG ")
endif(CMAKE_COMPILER_IS_GNUCXX)

message("CMAKE_CXX_FLAGS = ${CMAKE_CXX_FLAGS}")
message("CMAKE_CXX_FLAGS_DEBUG = ${CMAKE_CXX_FLAGS_DEBUG}")
message("CMAKE_CXX_FLAGS_RELEASE = ${CMAKE_CXX_FLAGS_RELEASE}")
message("CMAKE_CXX_FLAGS_MINSIZEREL = ${CMAKE_CXX_FLAGS_MINSIZEREL}")
message("CMAKE_CXX_FLAGS_RELWITHDEBINFO = ${CMAKE_CXX_FLAGS_RELWITHDEBINFO}\n")

message("CMAKE_C_FLAGS = ${CMAKE_C_FLAGS}")
message("CMAKE_C_FLAGS_DEBUG = ${CMAKE_C_FLAGS_DEBUG}")
message("CMAKE_C_FLAGS_RELEASE = ${CMAKE_C_FLAGS_RELEASE}")
message("CMAKE_C_FLAGS_MINSIZEREL = ${CMAKE_C_FLAGS_MINSIZEREL}")
message("CMAKE_C_FLAGS_RELWITHDEBINFO = ${CMAKE_C_FLAGS_RELWITHDEBINFO}\n")


if(USE_VCPKG)
  set(VCPKG_CXX_FLAGS ${CMAKE_CXX_FLAGS})
  set(VCPKG_CXX_FLAGS_DEBUG ${CMAKE_CXX_FLAGS_DEBUG})
  set(VCPKG_CXX_FLAGS_RELEASE ${CMAKE_CXX_FLAGS_RELEASE})
  set(VCPKG_CXX_FLAGS_MINSIZEREL ${CMAKE_CXX_FLAGS_MINSIZEREL})
  set(VCPKG_CXX_FLAGS_RELWITHDEBINFO ${CMAKE_CXX_FLAGS_RELWITHDEBINFO})

  set(VCPKG_C_FLAGS ${CMAKE_C_FLAGS})
  set(VCPKG_C_FLAGS_DEBUG ${CMAKE_C_FLAGS_DEBUG})
  set(VCPKG_C_FLAGS_RELEASE ${CMAKE_C_FLAGS_RELEASE})
  set(VCPKG_C_FLAGS_MINSIZEREL ${CMAKE_C_FLAGS_MINSIZEREL})
  set(VCPKG_C_FLAGS_RELWITHDEBINFO ${CMAKE_C_FLAGS_RELWITHDEBINFO})
endif(USE_VCPKG)
